/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/api': {
    get: {
      responses: {
        /** @description Success */
        200: {
          content: never;
        };
      };
    };
  };
  '/login': {
    get: {
      responses: {
        /** @description Success */
        200: {
          content: never;
        };
      };
    };
    post: {
      parameters: {
        query?: {
          returnUrl?: string;
        };
      };
      requestBody?: {
        content: {
          'multipart/form-data': {
            username?: string;
            password?: string;
            rememberMe?: string;
          };
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: never;
        };
      };
    };
  };
  '/logout': {
    get: {
      responses: {
        /** @description Success */
        200: {
          content: never;
        };
      };
    };
  };
  '/api/v3/autotagging': {
    get: {
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['AutoTaggingResource'][];
          };
        };
      };
    };
    post: {
      requestBody?: {
        content: {
          'application/json': components['schemas']['AutoTaggingResource'];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'text/plain': components['schemas']['AutoTaggingResource'];
            'application/json': components['schemas']['AutoTaggingResource'];
            'text/json': components['schemas']['AutoTaggingResource'];
          };
        };
      };
    };
  };
  '/api/v3/autotagging/{id}': {
    get: {
      parameters: {
        path: {
          id: number;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['AutoTaggingResource'];
          };
        };
      };
    };
    put: {
      parameters: {
        path: {
          id: string;
        };
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['AutoTaggingResource'];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'text/plain': components['schemas']['AutoTaggingResource'];
            'application/json': components['schemas']['AutoTaggingResource'];
            'text/json': components['schemas']['AutoTaggingResource'];
          };
        };
      };
    };
    delete: {
      parameters: {
        path: {
          id: number;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: never;
        };
      };
    };
  };
  '/api/v3/autotagging/schema': {
    get: {
      responses: {
        /** @description Success */
        200: {
          content: never;
        };
      };
    };
  };
  '/api/v3/system/backup': {
    get: {
      responses: {
        /** @description Success */
        200: {
          content: {
            'text/plain': components['schemas']['BackupResource'][];
            'application/json': components['schemas']['BackupResource'][];
            'text/json': components['schemas']['BackupResource'][];
          };
        };
      };
    };
  };
  '/api/v3/system/backup/{id}': {
    delete: {
      parameters: {
        path: {
          id: number;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: never;
        };
      };
    };
  };
  '/api/v3/system/backup/restore/{id}': {
    post: {
      parameters: {
        path: {
          id: number;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: never;
        };
      };
    };
  };
  '/api/v3/system/backup/restore/upload': {
    post: {
      responses: {
        /** @description Success */
        200: {
          content: never;
        };
      };
    };
  };
  '/api/v3/blocklist': {
    get: {
      parameters: {
        query?: {
          page?: number;
          pageSize?: number;
          sortKey?: string;
          sortDirection?: components['schemas']['SortDirection'];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['BlocklistResourcePagingResource'];
          };
        };
      };
    };
  };
  '/api/v3/blocklist/{id}': {
    delete: {
      parameters: {
        path: {
          id: number;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: never;
        };
      };
    };
  };
  '/api/v3/blocklist/bulk': {
    delete: {
      requestBody?: {
        content: {
          'application/json': components['schemas']['BlocklistBulkResource'];
          'text/json': components['schemas']['BlocklistBulkResource'];
          'application/*+json': components['schemas']['BlocklistBulkResource'];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: never;
        };
      };
    };
  };
  '/api/v3/calendar': {
    get: {
      parameters: {
        query?: {
          start?: string;
          end?: string;
          unmonitored?: boolean;
          includeSeries?: boolean;
          includeEpisodeFile?: boolean;
          includeEpisodeImages?: boolean;
          tags?: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['EpisodeResource'][];
          };
        };
      };
    };
  };
  '/api/v3/calendar/{id}': {
    get: {
      parameters: {
        path: {
          id: number;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['EpisodeResource'];
          };
        };
      };
    };
  };
  '/feed/v3/calendar/sonarr.ics': {
    get: {
      parameters: {
        query?: {
          pastDays?: number;
          futureDays?: number;
          tags?: string;
          unmonitored?: boolean;
          premieresOnly?: boolean;
          asAllDay?: boolean;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: never;
        };
      };
    };
  };
  '/api/v3/command': {
    get: {
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['CommandResource'][];
          };
        };
      };
    };
    post: {
      requestBody?: {
        content: {
          'application/json': components['schemas']['CommandResource'];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['CommandResource'];
          };
        };
      };
    };
  };
  '/api/v3/command/{id}': {
    get: {
      parameters: {
        path: {
          id: number;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['CommandResource'];
          };
        };
      };
    };
    delete: {
      parameters: {
        path: {
          id: number;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: never;
        };
      };
    };
  };
  '/api/v3/customfilter': {
    get: {
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['CustomFilterResource'][];
          };
        };
      };
    };
    post: {
      requestBody?: {
        content: {
          'application/json': components['schemas']['CustomFilterResource'];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'text/plain': components['schemas']['CustomFilterResource'];
            'application/json': components['schemas']['CustomFilterResource'];
            'text/json': components['schemas']['CustomFilterResource'];
          };
        };
      };
    };
  };
  '/api/v3/customfilter/{id}': {
    get: {
      parameters: {
        path: {
          id: number;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['CustomFilterResource'];
          };
        };
      };
    };
    put: {
      parameters: {
        path: {
          id: string;
        };
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['CustomFilterResource'];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'text/plain': components['schemas']['CustomFilterResource'];
            'application/json': components['schemas']['CustomFilterResource'];
            'text/json': components['schemas']['CustomFilterResource'];
          };
        };
      };
    };
    delete: {
      parameters: {
        path: {
          id: number;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: never;
        };
      };
    };
  };
  '/api/v3/customformat': {
    get: {
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['CustomFormatResource'][];
          };
        };
      };
    };
    post: {
      requestBody?: {
        content: {
          'application/json': components['schemas']['CustomFormatResource'];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'text/plain': components['schemas']['CustomFormatResource'];
            'application/json': components['schemas']['CustomFormatResource'];
            'text/json': components['schemas']['CustomFormatResource'];
          };
        };
      };
    };
  };
  '/api/v3/customformat/{id}': {
    get: {
      parameters: {
        path: {
          id: number;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['CustomFormatResource'];
          };
        };
      };
    };
    put: {
      parameters: {
        path: {
          id: string;
        };
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['CustomFormatResource'];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'text/plain': components['schemas']['CustomFormatResource'];
            'application/json': components['schemas']['CustomFormatResource'];
            'text/json': components['schemas']['CustomFormatResource'];
          };
        };
      };
    };
    delete: {
      parameters: {
        path: {
          id: number;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: never;
        };
      };
    };
  };
  '/api/v3/customformat/schema': {
    get: {
      responses: {
        /** @description Success */
        200: {
          content: never;
        };
      };
    };
  };
  '/api/v3/wanted/cutoff': {
    get: {
      parameters: {
        query?: {
          page?: number;
          pageSize?: number;
          sortKey?: string;
          sortDirection?: components['schemas']['SortDirection'];
          includeSeries?: boolean;
          includeEpisodeFile?: boolean;
          includeImages?: boolean;
          monitored?: boolean;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['EpisodeResourcePagingResource'];
          };
        };
      };
    };
  };
  '/api/v3/wanted/cutoff/{id}': {
    get: {
      parameters: {
        path: {
          id: number;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['EpisodeResource'];
          };
        };
      };
    };
  };
  '/api/v3/delayprofile': {
    get: {
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['DelayProfileResource'][];
          };
        };
      };
    };
    post: {
      requestBody?: {
        content: {
          'application/json': components['schemas']['DelayProfileResource'];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'text/plain': components['schemas']['DelayProfileResource'];
            'application/json': components['schemas']['DelayProfileResource'];
            'text/json': components['schemas']['DelayProfileResource'];
          };
        };
      };
    };
  };
  '/api/v3/delayprofile/{id}': {
    get: {
      parameters: {
        path: {
          id: number;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['DelayProfileResource'];
          };
        };
      };
    };
    put: {
      parameters: {
        path: {
          id: string;
        };
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['DelayProfileResource'];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'text/plain': components['schemas']['DelayProfileResource'];
            'application/json': components['schemas']['DelayProfileResource'];
            'text/json': components['schemas']['DelayProfileResource'];
          };
        };
      };
    };
    delete: {
      parameters: {
        path: {
          id: number;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: never;
        };
      };
    };
  };
  '/api/v3/delayprofile/reorder/{id}': {
    put: {
      parameters: {
        query?: {
          after?: number;
        };
        path: {
          id: number;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'text/plain': components['schemas']['DelayProfileResource'][];
            'application/json': components['schemas']['DelayProfileResource'][];
            'text/json': components['schemas']['DelayProfileResource'][];
          };
        };
      };
    };
  };
  '/api/v3/diskspace': {
    get: {
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['DiskSpaceResource'][];
          };
        };
      };
    };
  };
  '/api/v3/downloadclient': {
    get: {
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['DownloadClientResource'][];
          };
        };
      };
    };
    post: {
      parameters: {
        query?: {
          forceSave?: boolean;
        };
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['DownloadClientResource'];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['DownloadClientResource'];
          };
        };
      };
    };
  };
  '/api/v3/downloadclient/{id}': {
    get: {
      parameters: {
        path: {
          id: number;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['DownloadClientResource'];
          };
        };
      };
    };
    put: {
      parameters: {
        query?: {
          forceSave?: boolean;
        };
        path: {
          id: string;
        };
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['DownloadClientResource'];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['DownloadClientResource'];
          };
        };
      };
    };
    delete: {
      parameters: {
        path: {
          id: number;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: never;
        };
      };
    };
  };
  '/api/v3/downloadclient/bulk': {
    put: {
      requestBody?: {
        content: {
          'application/json': components['schemas']['DownloadClientBulkResource'];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['DownloadClientResource'];
          };
        };
      };
    };
    delete: {
      requestBody?: {
        content: {
          'application/json': components['schemas']['DownloadClientBulkResource'];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: never;
        };
      };
    };
  };
  '/api/v3/downloadclient/schema': {
    get: {
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['DownloadClientResource'][];
          };
        };
      };
    };
  };
  '/api/v3/downloadclient/test': {
    post: {
      requestBody?: {
        content: {
          'application/json': components['schemas']['DownloadClientResource'];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: never;
        };
      };
    };
  };
  '/api/v3/downloadclient/testall': {
    post: {
      responses: {
        /** @description Success */
        200: {
          content: never;
        };
      };
    };
  };
  '/api/v3/downloadclient/action/{name}': {
    post: {
      parameters: {
        path: {
          name: string;
        };
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['DownloadClientResource'];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: never;
        };
      };
    };
  };
  '/api/v3/config/downloadclient': {
    get: {
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['DownloadClientConfigResource'];
          };
        };
      };
    };
  };
  '/api/v3/config/downloadclient/{id}': {
    get: {
      parameters: {
        path: {
          id: number;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['DownloadClientConfigResource'];
          };
        };
      };
    };
    put: {
      parameters: {
        path: {
          id: string;
        };
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['DownloadClientConfigResource'];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'text/plain': components['schemas']['DownloadClientConfigResource'];
            'application/json': components['schemas']['DownloadClientConfigResource'];
            'text/json': components['schemas']['DownloadClientConfigResource'];
          };
        };
      };
    };
  };
  '/api/v3/episode': {
    get: {
      parameters: {
        query?: {
          seriesId?: number;
          seasonNumber?: number;
          episodeIds?: number[];
          episodeFileId?: number;
          includeImages?: boolean;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['EpisodeResource'][];
          };
        };
      };
    };
  };
  '/api/v3/episode/{id}': {
    get: {
      parameters: {
        path: {
          id: number;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['EpisodeResource'];
          };
        };
      };
    };
    put: {
      parameters: {
        path: {
          id: number;
        };
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['EpisodeResource'];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'text/plain': components['schemas']['EpisodeResource'];
            'application/json': components['schemas']['EpisodeResource'];
            'text/json': components['schemas']['EpisodeResource'];
          };
        };
      };
    };
  };
  '/api/v3/episode/monitor': {
    put: {
      parameters: {
        query?: {
          includeImages?: boolean;
        };
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['EpisodesMonitoredResource'];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: never;
        };
      };
    };
  };
  '/api/v3/episodefile': {
    get: {
      parameters: {
        query?: {
          seriesId?: number;
          episodeFileIds?: number[];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['EpisodeFileResource'][];
          };
        };
      };
    };
  };
  '/api/v3/episodefile/{id}': {
    get: {
      parameters: {
        path: {
          id: number;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['EpisodeFileResource'];
          };
        };
      };
    };
    put: {
      parameters: {
        path: {
          id: string;
        };
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['EpisodeFileResource'];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'text/plain': components['schemas']['EpisodeFileResource'];
            'application/json': components['schemas']['EpisodeFileResource'];
            'text/json': components['schemas']['EpisodeFileResource'];
          };
        };
      };
    };
    delete: {
      parameters: {
        path: {
          id: number;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: never;
        };
      };
    };
  };
  '/api/v3/episodefile/editor': {
    put: {
      requestBody?: {
        content: {
          'application/json': components['schemas']['EpisodeFileListResource'];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: never;
        };
      };
    };
  };
  '/api/v3/episodefile/bulk': {
    put: {
      requestBody?: {
        content: {
          'application/json': components['schemas']['EpisodeFileResource'][];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: never;
        };
      };
    };
    delete: {
      requestBody?: {
        content: {
          'application/json': components['schemas']['EpisodeFileListResource'];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: never;
        };
      };
    };
  };
  '/api/v3/filesystem': {
    get: {
      parameters: {
        query?: {
          path?: string;
          includeFiles?: boolean;
          allowFoldersWithoutTrailingSlashes?: boolean;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: never;
        };
      };
    };
  };
  '/api/v3/filesystem/type': {
    get: {
      parameters: {
        query?: {
          path?: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: never;
        };
      };
    };
  };
  '/api/v3/filesystem/mediafiles': {
    get: {
      parameters: {
        query?: {
          path?: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: never;
        };
      };
    };
  };
  '/api/v3/health': {
    get: {
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['HealthResource'][];
          };
        };
      };
    };
  };
  '/api/v3/history': {
    get: {
      parameters: {
        query?: {
          page?: number;
          pageSize?: number;
          sortKey?: string;
          sortDirection?: components['schemas']['SortDirection'];
          includeSeries?: boolean;
          includeEpisode?: boolean;
          eventType?: number;
          episodeId?: number;
          downloadId?: string;
          seriesIds?: number[];
          languages?: number[];
          quality?: number[];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['HistoryResourcePagingResource'];
          };
        };
      };
    };
  };
  '/api/v3/history/since': {
    get: {
      parameters: {
        query?: {
          date?: string;
          eventType?: components['schemas']['EpisodeHistoryEventType'];
          includeSeries?: boolean;
          includeEpisode?: boolean;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['HistoryResource'][];
          };
        };
      };
    };
  };
  '/api/v3/history/series': {
    get: {
      parameters: {
        query?: {
          seriesId?: number;
          seasonNumber?: number;
          eventType?: components['schemas']['EpisodeHistoryEventType'];
          includeSeries?: boolean;
          includeEpisode?: boolean;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['HistoryResource'][];
          };
        };
      };
    };
  };
  '/api/v3/history/failed/{id}': {
    post: {
      parameters: {
        path: {
          id: number;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: never;
        };
      };
    };
  };
  '/api/v3/config/host': {
    get: {
      responses: {
        /** @description Success */
        200: {
          content: {
            'text/plain': components['schemas']['HostConfigResource'];
            'application/json': components['schemas']['HostConfigResource'];
            'text/json': components['schemas']['HostConfigResource'];
          };
        };
      };
    };
  };
  '/api/v3/config/host/{id}': {
    get: {
      parameters: {
        path: {
          id: number;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['HostConfigResource'];
          };
        };
      };
    };
    put: {
      parameters: {
        path: {
          id: string;
        };
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['HostConfigResource'];
          'text/json': components['schemas']['HostConfigResource'];
          'application/*+json': components['schemas']['HostConfigResource'];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'text/plain': components['schemas']['HostConfigResource'];
            'application/json': components['schemas']['HostConfigResource'];
            'text/json': components['schemas']['HostConfigResource'];
          };
        };
      };
    };
  };
  '/api/v3/importlist': {
    get: {
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['ImportListResource'][];
          };
        };
      };
    };
    post: {
      parameters: {
        query?: {
          forceSave?: boolean;
        };
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['ImportListResource'];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['ImportListResource'];
          };
        };
      };
    };
  };
  '/api/v3/importlist/{id}': {
    get: {
      parameters: {
        path: {
          id: number;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['ImportListResource'];
          };
        };
      };
    };
    put: {
      parameters: {
        query?: {
          forceSave?: boolean;
        };
        path: {
          id: string;
        };
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['ImportListResource'];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['ImportListResource'];
          };
        };
      };
    };
    delete: {
      parameters: {
        path: {
          id: number;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: never;
        };
      };
    };
  };
  '/api/v3/importlist/bulk': {
    put: {
      requestBody?: {
        content: {
          'application/json': components['schemas']['ImportListBulkResource'];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['ImportListResource'];
          };
        };
      };
    };
    delete: {
      requestBody?: {
        content: {
          'application/json': components['schemas']['ImportListBulkResource'];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: never;
        };
      };
    };
  };
  '/api/v3/importlist/schema': {
    get: {
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['ImportListResource'][];
          };
        };
      };
    };
  };
  '/api/v3/importlist/test': {
    post: {
      requestBody?: {
        content: {
          'application/json': components['schemas']['ImportListResource'];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: never;
        };
      };
    };
  };
  '/api/v3/importlist/testall': {
    post: {
      responses: {
        /** @description Success */
        200: {
          content: never;
        };
      };
    };
  };
  '/api/v3/importlist/action/{name}': {
    post: {
      parameters: {
        path: {
          name: string;
        };
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['ImportListResource'];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: never;
        };
      };
    };
  };
  '/api/v3/importlistexclusion': {
    get: {
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['ImportListExclusionResource'][];
          };
        };
      };
    };
    post: {
      requestBody?: {
        content: {
          'application/json': components['schemas']['ImportListExclusionResource'];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'text/plain': components['schemas']['ImportListExclusionResource'];
            'application/json': components['schemas']['ImportListExclusionResource'];
            'text/json': components['schemas']['ImportListExclusionResource'];
          };
        };
      };
    };
  };
  '/api/v3/importlistexclusion/{id}': {
    get: {
      parameters: {
        path: {
          id: number;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['ImportListExclusionResource'];
          };
        };
      };
    };
    put: {
      parameters: {
        path: {
          id: string;
        };
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['ImportListExclusionResource'];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'text/plain': components['schemas']['ImportListExclusionResource'];
            'application/json': components['schemas']['ImportListExclusionResource'];
            'text/json': components['schemas']['ImportListExclusionResource'];
          };
        };
      };
    };
    delete: {
      parameters: {
        path: {
          id: number;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: never;
        };
      };
    };
  };
  '/api/v3/indexer': {
    get: {
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['IndexerResource'][];
          };
        };
      };
    };
    post: {
      parameters: {
        query?: {
          forceSave?: boolean;
        };
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['IndexerResource'];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['IndexerResource'];
          };
        };
      };
    };
  };
  '/api/v3/indexer/{id}': {
    get: {
      parameters: {
        path: {
          id: number;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['IndexerResource'];
          };
        };
      };
    };
    put: {
      parameters: {
        query?: {
          forceSave?: boolean;
        };
        path: {
          id: string;
        };
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['IndexerResource'];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['IndexerResource'];
          };
        };
      };
    };
    delete: {
      parameters: {
        path: {
          id: number;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: never;
        };
      };
    };
  };
  '/api/v3/indexer/bulk': {
    put: {
      requestBody?: {
        content: {
          'application/json': components['schemas']['IndexerBulkResource'];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['IndexerResource'];
          };
        };
      };
    };
    delete: {
      requestBody?: {
        content: {
          'application/json': components['schemas']['IndexerBulkResource'];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: never;
        };
      };
    };
  };
  '/api/v3/indexer/schema': {
    get: {
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['IndexerResource'][];
          };
        };
      };
    };
  };
  '/api/v3/indexer/test': {
    post: {
      requestBody?: {
        content: {
          'application/json': components['schemas']['IndexerResource'];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: never;
        };
      };
    };
  };
  '/api/v3/indexer/testall': {
    post: {
      responses: {
        /** @description Success */
        200: {
          content: never;
        };
      };
    };
  };
  '/api/v3/indexer/action/{name}': {
    post: {
      parameters: {
        path: {
          name: string;
        };
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['IndexerResource'];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: never;
        };
      };
    };
  };
  '/api/v3/config/indexer': {
    get: {
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['IndexerConfigResource'];
          };
        };
      };
    };
  };
  '/api/v3/config/indexer/{id}': {
    get: {
      parameters: {
        path: {
          id: number;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['IndexerConfigResource'];
          };
        };
      };
    };
    put: {
      parameters: {
        path: {
          id: string;
        };
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['IndexerConfigResource'];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'text/plain': components['schemas']['IndexerConfigResource'];
            'application/json': components['schemas']['IndexerConfigResource'];
            'text/json': components['schemas']['IndexerConfigResource'];
          };
        };
      };
    };
  };
  '/api/v3/language': {
    get: {
      responses: {
        /** @description Success */
        200: {
          content: {
            'text/plain': components['schemas']['LanguageResource'][];
            'application/json': components['schemas']['LanguageResource'][];
            'text/json': components['schemas']['LanguageResource'][];
          };
        };
      };
    };
  };
  '/api/v3/language/{id}': {
    get: {
      parameters: {
        path: {
          id: number;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['LanguageResource'];
          };
        };
      };
    };
  };
  '/api/v3/languageprofile': {
    /** @deprecated */
    get: {
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['LanguageProfileResource'][];
          };
        };
      };
    };
    /** @deprecated */
    post: {
      requestBody?: {
        content: {
          'application/json': components['schemas']['LanguageProfileResource'];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['LanguageProfileResource'];
          };
        };
      };
    };
  };
  '/api/v3/languageprofile/{id}': {
    get: {
      parameters: {
        path: {
          id: number;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['LanguageProfileResource'];
          };
        };
      };
    };
    /** @deprecated */
    put: {
      parameters: {
        path: {
          id: string;
        };
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['LanguageProfileResource'];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['LanguageProfileResource'];
          };
        };
      };
    };
    /** @deprecated */
    delete: {
      parameters: {
        path: {
          id: number;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: never;
        };
      };
    };
  };
  '/api/v3/languageprofile/schema': {
    /** @deprecated */
    get: {
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['LanguageProfileResource'];
          };
        };
      };
    };
  };
  '/api/v3/localization': {
    get: {
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['LocalizationResource'];
          };
        };
      };
    };
  };
  '/api/v3/localization/language': {
    get: {
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['LocalizationLanguageResource'];
          };
        };
      };
    };
  };
  '/api/v3/localization/{id}': {
    get: {
      parameters: {
        path: {
          id: number;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['LocalizationResource'];
          };
        };
      };
    };
  };
  '/api/v3/log': {
    get: {
      parameters: {
        query?: {
          page?: number;
          pageSize?: number;
          sortKey?: string;
          sortDirection?: components['schemas']['SortDirection'];
          level?: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['LogResourcePagingResource'];
          };
        };
      };
    };
  };
  '/api/v3/log/file': {
    get: {
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['LogFileResource'][];
          };
        };
      };
    };
  };
  '/api/v3/log/file/{filename}': {
    get: {
      parameters: {
        path: {
          filename: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: never;
        };
      };
    };
  };
  '/api/v3/manualimport': {
    get: {
      parameters: {
        query?: {
          folder?: string;
          downloadId?: string;
          seriesId?: number;
          seasonNumber?: number;
          filterExistingFiles?: boolean;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['ManualImportResource'][];
          };
        };
      };
    };
    post: {
      requestBody?: {
        content: {
          'application/json': components['schemas']['ManualImportReprocessResource'][];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: never;
        };
      };
    };
  };
  '/api/v3/mediacover/{seriesId}/{filename}': {
    get: {
      parameters: {
        path: {
          seriesId: number;
          filename: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: never;
        };
      };
    };
  };
  '/api/v3/config/mediamanagement': {
    get: {
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['MediaManagementConfigResource'];
          };
        };
      };
    };
  };
  '/api/v3/config/mediamanagement/{id}': {
    get: {
      parameters: {
        path: {
          id: number;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['MediaManagementConfigResource'];
          };
        };
      };
    };
    put: {
      parameters: {
        path: {
          id: string;
        };
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['MediaManagementConfigResource'];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'text/plain': components['schemas']['MediaManagementConfigResource'];
            'application/json': components['schemas']['MediaManagementConfigResource'];
            'text/json': components['schemas']['MediaManagementConfigResource'];
          };
        };
      };
    };
  };
  '/api/v3/metadata': {
    get: {
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['MetadataResource'][];
          };
        };
      };
    };
    post: {
      parameters: {
        query?: {
          forceSave?: boolean;
        };
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['MetadataResource'];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['MetadataResource'];
          };
        };
      };
    };
  };
  '/api/v3/metadata/{id}': {
    get: {
      parameters: {
        path: {
          id: number;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['MetadataResource'];
          };
        };
      };
    };
    put: {
      parameters: {
        query?: {
          forceSave?: boolean;
        };
        path: {
          id: string;
        };
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['MetadataResource'];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['MetadataResource'];
          };
        };
      };
    };
    delete: {
      parameters: {
        path: {
          id: number;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: never;
        };
      };
    };
  };
  '/api/v3/metadata/schema': {
    get: {
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['MetadataResource'][];
          };
        };
      };
    };
  };
  '/api/v3/metadata/test': {
    post: {
      requestBody?: {
        content: {
          'application/json': components['schemas']['MetadataResource'];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: never;
        };
      };
    };
  };
  '/api/v3/metadata/testall': {
    post: {
      responses: {
        /** @description Success */
        200: {
          content: never;
        };
      };
    };
  };
  '/api/v3/metadata/action/{name}': {
    post: {
      parameters: {
        path: {
          name: string;
        };
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['MetadataResource'];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: never;
        };
      };
    };
  };
  '/api/v3/wanted/missing': {
    get: {
      parameters: {
        query?: {
          page?: number;
          pageSize?: number;
          sortKey?: string;
          sortDirection?: components['schemas']['SortDirection'];
          includeSeries?: boolean;
          includeImages?: boolean;
          monitored?: boolean;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['EpisodeResourcePagingResource'];
          };
        };
      };
    };
  };
  '/api/v3/wanted/missing/{id}': {
    get: {
      parameters: {
        path: {
          id: number;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['EpisodeResource'];
          };
        };
      };
    };
  };
  '/api/v3/config/naming': {
    get: {
      responses: {
        /** @description Success */
        200: {
          content: {
            'text/plain': components['schemas']['NamingConfigResource'];
            'application/json': components['schemas']['NamingConfigResource'];
            'text/json': components['schemas']['NamingConfigResource'];
          };
        };
      };
    };
  };
  '/api/v3/config/naming/{id}': {
    get: {
      parameters: {
        path: {
          id: number;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['NamingConfigResource'];
          };
        };
      };
    };
    put: {
      parameters: {
        path: {
          id: string;
        };
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['NamingConfigResource'];
          'text/json': components['schemas']['NamingConfigResource'];
          'application/*+json': components['schemas']['NamingConfigResource'];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'text/plain': components['schemas']['NamingConfigResource'];
            'application/json': components['schemas']['NamingConfigResource'];
            'text/json': components['schemas']['NamingConfigResource'];
          };
        };
      };
    };
  };
  '/api/v3/config/naming/examples': {
    get: {
      parameters: {
        query?: {
          renameEpisodes?: boolean;
          replaceIllegalCharacters?: boolean;
          colonReplacementFormat?: number;
          multiEpisodeStyle?: number;
          standardEpisodeFormat?: string;
          dailyEpisodeFormat?: string;
          animeEpisodeFormat?: string;
          seriesFolderFormat?: string;
          seasonFolderFormat?: string;
          specialsFolderFormat?: string;
          includeSeriesTitle?: boolean;
          includeEpisodeTitle?: boolean;
          includeQuality?: boolean;
          replaceSpaces?: boolean;
          separator?: string;
          numberStyle?: string;
          id?: number;
          resourceName?: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: never;
        };
      };
    };
  };
  '/api/v3/notification': {
    get: {
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['NotificationResource'][];
          };
        };
      };
    };
    post: {
      parameters: {
        query?: {
          forceSave?: boolean;
        };
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['NotificationResource'];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['NotificationResource'];
          };
        };
      };
    };
  };
  '/api/v3/notification/{id}': {
    get: {
      parameters: {
        path: {
          id: number;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['NotificationResource'];
          };
        };
      };
    };
    put: {
      parameters: {
        query?: {
          forceSave?: boolean;
        };
        path: {
          id: string;
        };
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['NotificationResource'];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['NotificationResource'];
          };
        };
      };
    };
    delete: {
      parameters: {
        path: {
          id: number;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: never;
        };
      };
    };
  };
  '/api/v3/notification/schema': {
    get: {
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['NotificationResource'][];
          };
        };
      };
    };
  };
  '/api/v3/notification/test': {
    post: {
      requestBody?: {
        content: {
          'application/json': components['schemas']['NotificationResource'];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: never;
        };
      };
    };
  };
  '/api/v3/notification/testall': {
    post: {
      responses: {
        /** @description Success */
        200: {
          content: never;
        };
      };
    };
  };
  '/api/v3/notification/action/{name}': {
    post: {
      parameters: {
        path: {
          name: string;
        };
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['NotificationResource'];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: never;
        };
      };
    };
  };
  '/api/v3/parse': {
    get: {
      parameters: {
        query?: {
          title?: string;
          path?: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['ParseResource'];
          };
        };
      };
    };
  };
  '/ping': {
    get: {
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['PingResource'];
          };
        };
      };
    };
  };
  '/api/v3/qualitydefinition/{id}': {
    get: {
      parameters: {
        path: {
          id: number;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['QualityDefinitionResource'];
          };
        };
      };
    };
    put: {
      parameters: {
        path: {
          id: string;
        };
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['QualityDefinitionResource'];
          'text/json': components['schemas']['QualityDefinitionResource'];
          'application/*+json': components['schemas']['QualityDefinitionResource'];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'text/plain': components['schemas']['QualityDefinitionResource'];
            'application/json': components['schemas']['QualityDefinitionResource'];
            'text/json': components['schemas']['QualityDefinitionResource'];
          };
        };
      };
    };
  };
  '/api/v3/qualitydefinition': {
    get: {
      responses: {
        /** @description Success */
        200: {
          content: {
            'text/plain': components['schemas']['QualityDefinitionResource'][];
            'application/json': components['schemas']['QualityDefinitionResource'][];
            'text/json': components['schemas']['QualityDefinitionResource'][];
          };
        };
      };
    };
  };
  '/api/v3/qualitydefinition/update': {
    put: {
      requestBody?: {
        content: {
          'application/json': components['schemas']['QualityDefinitionResource'][];
          'text/json': components['schemas']['QualityDefinitionResource'][];
          'application/*+json': components['schemas']['QualityDefinitionResource'][];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: never;
        };
      };
    };
  };
  '/api/v3/qualityprofile': {
    get: {
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['QualityProfileResource'][];
          };
        };
      };
    };
    post: {
      requestBody?: {
        content: {
          'application/json': components['schemas']['QualityProfileResource'];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'text/plain': components['schemas']['QualityProfileResource'];
            'application/json': components['schemas']['QualityProfileResource'];
            'text/json': components['schemas']['QualityProfileResource'];
          };
        };
      };
    };
  };
  '/api/v3/qualityprofile/{id}': {
    get: {
      parameters: {
        path: {
          id: number;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['QualityProfileResource'];
          };
        };
      };
    };
    put: {
      parameters: {
        path: {
          id: string;
        };
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['QualityProfileResource'];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'text/plain': components['schemas']['QualityProfileResource'];
            'application/json': components['schemas']['QualityProfileResource'];
            'text/json': components['schemas']['QualityProfileResource'];
          };
        };
      };
    };
    delete: {
      parameters: {
        path: {
          id: number;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: never;
        };
      };
    };
  };
  '/api/v3/qualityprofile/schema': {
    get: {
      responses: {
        /** @description Success */
        200: {
          content: {
            'text/plain': components['schemas']['QualityProfileResource'];
            'application/json': components['schemas']['QualityProfileResource'];
            'text/json': components['schemas']['QualityProfileResource'];
          };
        };
      };
    };
  };
  '/api/v3/queue/{id}': {
    delete: {
      parameters: {
        query?: {
          removeFromClient?: boolean;
          blocklist?: boolean;
          skipRedownload?: boolean;
        };
        path: {
          id: number;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: never;
        };
      };
    };
  };
  '/api/v3/queue/bulk': {
    delete: {
      parameters: {
        query?: {
          removeFromClient?: boolean;
          blocklist?: boolean;
          skipRedownload?: boolean;
        };
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['QueueBulkResource'];
          'text/json': components['schemas']['QueueBulkResource'];
          'application/*+json': components['schemas']['QueueBulkResource'];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: never;
        };
      };
    };
  };
  '/api/v3/queue': {
    get: {
      parameters: {
        query?: {
          page?: number;
          pageSize?: number;
          sortKey?: string;
          sortDirection?: components['schemas']['SortDirection'];
          includeUnknownSeriesItems?: boolean;
          includeSeries?: boolean;
          includeEpisode?: boolean;
          seriesIds?: number[];
          protocol?: components['schemas']['DownloadProtocol'];
          languages?: number[];
          quality?: number;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['QueueResourcePagingResource'];
          };
        };
      };
    };
  };
  '/api/v3/queue/grab/{id}': {
    post: {
      parameters: {
        path: {
          id: number;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: never;
        };
      };
    };
  };
  '/api/v3/queue/grab/bulk': {
    post: {
      requestBody?: {
        content: {
          'application/json': components['schemas']['QueueBulkResource'];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: never;
        };
      };
    };
  };
  '/api/v3/queue/details': {
    get: {
      parameters: {
        query?: {
          seriesId?: number;
          episodeIds?: number[];
          includeSeries?: boolean;
          includeEpisode?: boolean;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['QueueResource'][];
          };
        };
      };
    };
  };
  '/api/v3/queue/status': {
    get: {
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['QueueStatusResource'];
          };
        };
      };
    };
  };
  '/api/v3/release': {
    get: {
      parameters: {
        query?: {
          seriesId?: number;
          episodeId?: number;
          seasonNumber?: number;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['ReleaseResource'][];
          };
        };
      };
    };
    post: {
      requestBody?: {
        content: {
          'application/json': components['schemas']['ReleaseResource'];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: never;
        };
      };
    };
  };
  '/api/v3/releaseprofile': {
    get: {
      responses: {
        /** @description Success */
        200: {
          content: {
            'text/plain': components['schemas']['ReleaseProfileResource'][];
            'application/json': components['schemas']['ReleaseProfileResource'][];
            'text/json': components['schemas']['ReleaseProfileResource'][];
          };
        };
      };
    };
    post: {
      requestBody?: {
        content: {
          'application/json': components['schemas']['ReleaseProfileResource'];
          'text/json': components['schemas']['ReleaseProfileResource'];
          'application/*+json': components['schemas']['ReleaseProfileResource'];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'text/plain': components['schemas']['ReleaseProfileResource'];
            'application/json': components['schemas']['ReleaseProfileResource'];
            'text/json': components['schemas']['ReleaseProfileResource'];
          };
        };
      };
    };
  };
  '/api/v3/releaseprofile/{id}': {
    get: {
      parameters: {
        path: {
          id: number;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['ReleaseProfileResource'];
          };
        };
      };
    };
    put: {
      parameters: {
        path: {
          id: string;
        };
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['ReleaseProfileResource'];
          'text/json': components['schemas']['ReleaseProfileResource'];
          'application/*+json': components['schemas']['ReleaseProfileResource'];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'text/plain': components['schemas']['ReleaseProfileResource'];
            'application/json': components['schemas']['ReleaseProfileResource'];
            'text/json': components['schemas']['ReleaseProfileResource'];
          };
        };
      };
    };
    delete: {
      parameters: {
        path: {
          id: number;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: never;
        };
      };
    };
  };
  '/api/v3/release/push': {
    post: {
      requestBody?: {
        content: {
          'application/json': components['schemas']['ReleaseResource'];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'text/plain': components['schemas']['ReleaseResource'][];
            'application/json': components['schemas']['ReleaseResource'][];
            'text/json': components['schemas']['ReleaseResource'][];
          };
        };
      };
    };
  };
  '/api/v3/remotepathmapping': {
    get: {
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['RemotePathMappingResource'][];
          };
        };
      };
    };
    post: {
      requestBody?: {
        content: {
          'application/json': components['schemas']['RemotePathMappingResource'];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'text/plain': components['schemas']['RemotePathMappingResource'];
            'application/json': components['schemas']['RemotePathMappingResource'];
            'text/json': components['schemas']['RemotePathMappingResource'];
          };
        };
      };
    };
  };
  '/api/v3/remotepathmapping/{id}': {
    get: {
      parameters: {
        path: {
          id: number;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['RemotePathMappingResource'];
          };
        };
      };
    };
    put: {
      parameters: {
        path: {
          id: string;
        };
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['RemotePathMappingResource'];
          'text/json': components['schemas']['RemotePathMappingResource'];
          'application/*+json': components['schemas']['RemotePathMappingResource'];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'text/plain': components['schemas']['RemotePathMappingResource'];
            'application/json': components['schemas']['RemotePathMappingResource'];
            'text/json': components['schemas']['RemotePathMappingResource'];
          };
        };
      };
    };
    delete: {
      parameters: {
        path: {
          id: number;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: never;
        };
      };
    };
  };
  '/api/v3/rename': {
    get: {
      parameters: {
        query?: {
          seriesId?: number;
          seasonNumber?: number;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['RenameEpisodeResource'][];
          };
        };
      };
    };
  };
  '/api/v3/rootfolder': {
    get: {
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['RootFolderResource'][];
          };
        };
      };
    };
    post: {
      requestBody?: {
        content: {
          'application/json': components['schemas']['RootFolderResource'];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'text/plain': components['schemas']['RootFolderResource'];
            'application/json': components['schemas']['RootFolderResource'];
            'text/json': components['schemas']['RootFolderResource'];
          };
        };
      };
    };
  };
  '/api/v3/rootfolder/{id}': {
    get: {
      parameters: {
        path: {
          id: number;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['RootFolderResource'];
          };
        };
      };
    };
    delete: {
      parameters: {
        path: {
          id: number;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: never;
        };
      };
    };
  };
  '/api/v3/seasonpass': {
    post: {
      requestBody?: {
        content: {
          'application/json': components['schemas']['SeasonPassResource'];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: never;
        };
      };
    };
  };
  '/api/v3/series': {
    get: {
      parameters: {
        query?: {
          tvdbId?: number;
          includeSeasonImages?: boolean;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['SeriesResource'][];
          };
        };
      };
    };
    post: {
      requestBody?: {
        content: {
          'application/json': components['schemas']['SeriesResource'];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'text/plain': components['schemas']['SeriesResource'];
            'application/json': components['schemas']['SeriesResource'];
            'text/json': components['schemas']['SeriesResource'];
          };
        };
      };
    };
  };
  '/api/v3/series/{id}': {
    get: {
      parameters: {
        query?: {
          includeSeasonImages?: boolean;
        };
        path: {
          id: number;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['SeriesResource'];
          };
        };
      };
    };
    put: {
      parameters: {
        query?: {
          moveFiles?: boolean;
        };
        path: {
          id: string;
        };
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['SeriesResource'];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'text/plain': components['schemas']['SeriesResource'];
            'application/json': components['schemas']['SeriesResource'];
            'text/json': components['schemas']['SeriesResource'];
          };
        };
      };
    };
    delete: {
      parameters: {
        query?: {
          deleteFiles?: boolean;
          addImportListExclusion?: boolean;
        };
        path: {
          id: number;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: never;
        };
      };
    };
  };
  '/api/v3/series/editor': {
    put: {
      requestBody?: {
        content: {
          'application/json': components['schemas']['SeriesEditorResource'];
          'text/json': components['schemas']['SeriesEditorResource'];
          'application/*+json': components['schemas']['SeriesEditorResource'];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: never;
        };
      };
    };
    delete: {
      requestBody?: {
        content: {
          'application/json': components['schemas']['SeriesEditorResource'];
          'text/json': components['schemas']['SeriesEditorResource'];
          'application/*+json': components['schemas']['SeriesEditorResource'];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: never;
        };
      };
    };
  };
  '/api/v3/series/import': {
    post: {
      requestBody?: {
        content: {
          'application/json': components['schemas']['SeriesResource'][];
          'text/json': components['schemas']['SeriesResource'][];
          'application/*+json': components['schemas']['SeriesResource'][];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: never;
        };
      };
    };
  };
  '/api/v3/series/lookup': {
    get: {
      parameters: {
        query?: {
          term?: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: never;
        };
      };
    };
  };
  '/content/{path}': {
    get: {
      parameters: {
        path: {
          path: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: never;
        };
      };
    };
  };
  '/': {
    get: {
      parameters: {
        path: {
          path: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: never;
        };
      };
    };
  };
  '/{path}': {
    get: {
      parameters: {
        path: {
          path: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: never;
        };
      };
    };
  };
  '/api/v3/system/status': {
    get: {
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['SystemResource'];
          };
        };
      };
    };
  };
  '/api/v3/system/routes': {
    get: {
      responses: {
        /** @description Success */
        200: {
          content: never;
        };
      };
    };
  };
  '/api/v3/system/routes/duplicate': {
    get: {
      responses: {
        /** @description Success */
        200: {
          content: never;
        };
      };
    };
  };
  '/api/v3/system/shutdown': {
    post: {
      responses: {
        /** @description Success */
        200: {
          content: never;
        };
      };
    };
  };
  '/api/v3/system/restart': {
    post: {
      responses: {
        /** @description Success */
        200: {
          content: never;
        };
      };
    };
  };
  '/api/v3/tag': {
    get: {
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['TagResource'][];
          };
        };
      };
    };
    post: {
      requestBody?: {
        content: {
          'application/json': components['schemas']['TagResource'];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'text/plain': components['schemas']['TagResource'];
            'application/json': components['schemas']['TagResource'];
            'text/json': components['schemas']['TagResource'];
          };
        };
      };
    };
  };
  '/api/v3/tag/{id}': {
    get: {
      parameters: {
        path: {
          id: number;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['TagResource'];
          };
        };
      };
    };
    put: {
      parameters: {
        path: {
          id: string;
        };
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['TagResource'];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'text/plain': components['schemas']['TagResource'];
            'application/json': components['schemas']['TagResource'];
            'text/json': components['schemas']['TagResource'];
          };
        };
      };
    };
    delete: {
      parameters: {
        path: {
          id: number;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: never;
        };
      };
    };
  };
  '/api/v3/tag/detail': {
    get: {
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['TagDetailsResource'][];
          };
        };
      };
    };
  };
  '/api/v3/tag/detail/{id}': {
    get: {
      parameters: {
        path: {
          id: number;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['TagDetailsResource'];
          };
        };
      };
    };
  };
  '/api/v3/system/task': {
    get: {
      responses: {
        /** @description Success */
        200: {
          content: {
            'text/plain': components['schemas']['TaskResource'][];
            'application/json': components['schemas']['TaskResource'][];
            'text/json': components['schemas']['TaskResource'][];
          };
        };
      };
    };
  };
  '/api/v3/system/task/{id}': {
    get: {
      parameters: {
        path: {
          id: number;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['TaskResource'];
          };
        };
      };
    };
  };
  '/api/v3/config/ui/{id}': {
    get: {
      parameters: {
        path: {
          id: number;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['UiConfigResource'];
          };
        };
      };
    };
    put: {
      parameters: {
        path: {
          id: string;
        };
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['UiConfigResource'];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'text/plain': components['schemas']['UiConfigResource'];
            'application/json': components['schemas']['UiConfigResource'];
            'text/json': components['schemas']['UiConfigResource'];
          };
        };
      };
    };
  };
  '/api/v3/config/ui': {
    get: {
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['UiConfigResource'];
          };
        };
      };
    };
  };
  '/api/v3/update': {
    get: {
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['UpdateResource'][];
          };
        };
      };
    };
  };
  '/api/v3/log/file/update': {
    get: {
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['LogFileResource'][];
          };
        };
      };
    };
  };
  '/api/v3/log/file/update/{filename}': {
    get: {
      parameters: {
        path: {
          filename: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: never;
        };
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    AddSeriesOptions: {
      ignoreEpisodesWithFiles?: boolean;
      ignoreEpisodesWithoutFiles?: boolean;
      monitor?: components['schemas']['MonitorTypes'];
      searchForMissingEpisodes?: boolean;
      searchForCutoffUnmetEpisodes?: boolean;
    };
    AlternateTitleResource: {
      title?: string | null;
      /** Format: int32 */
      seasonNumber?: number | null;
      /** Format: int32 */
      sceneSeasonNumber?: number | null;
      sceneOrigin?: string | null;
      comment?: string | null;
    };
    /** @enum {string} */
    ApplyTags: 'add' | 'remove' | 'replace';
    /** @enum {string} */
    AuthenticationRequiredType: 'enabled' | 'disabledForLocalAddresses';
    /** @enum {string} */
    AuthenticationType: 'none' | 'basic' | 'forms' | 'external';
    AutoTaggingResource: {
      /** Format: int32 */
      id?: number;
      name?: string | null;
      removeTagsAutomatically?: boolean;
      tags?: number[] | null;
      specifications?:
        | components['schemas']['AutoTaggingSpecificationSchema'][]
        | null;
    };
    AutoTaggingSpecificationSchema: {
      /** Format: int32 */
      id?: number;
      name?: string | null;
      implementation?: string | null;
      implementationName?: string | null;
      negate?: boolean;
      required?: boolean;
      fields?: components['schemas']['Field'][] | null;
    };
    BackupResource: {
      /** Format: int32 */
      id?: number;
      name?: string | null;
      path?: string | null;
      type?: components['schemas']['BackupType'];
      /** Format: int64 */
      size?: number;
      /** Format: date-time */
      time?: string;
    };
    /** @enum {string} */
    BackupType: 'scheduled' | 'manual' | 'update';
    BlocklistBulkResource: {
      ids?: number[] | null;
    };
    BlocklistResource: {
      /** Format: int32 */
      id?: number;
      /** Format: int32 */
      seriesId?: number;
      episodeIds?: number[] | null;
      sourceTitle?: string | null;
      languages?: components['schemas']['Language'][] | null;
      quality?: components['schemas']['QualityModel'];
      customFormats?: components['schemas']['CustomFormatResource'][] | null;
      /** Format: date-time */
      date?: string;
      protocol?: components['schemas']['DownloadProtocol'];
      indexer?: string | null;
      message?: string | null;
      series?: components['schemas']['SeriesResource'];
    };
    BlocklistResourcePagingResource: {
      /** Format: int32 */
      page?: number;
      /** Format: int32 */
      pageSize?: number;
      sortKey?: string | null;
      sortDirection?: components['schemas']['SortDirection'];
      /** Format: int32 */
      totalRecords?: number;
      records?: components['schemas']['BlocklistResource'][] | null;
    };
    /** @enum {string} */
    CertificateValidationType:
      | 'enabled'
      | 'disabledForLocalAddresses'
      | 'disabled';
    Command: {
      sendUpdatesToClient?: boolean;
      updateScheduledTask?: boolean;
      completionMessage?: string | null;
      requiresDiskAccess?: boolean;
      isExclusive?: boolean;
      isLongRunning?: boolean;
      name?: string | null;
      /** Format: date-time */
      lastExecutionTime?: string | null;
      /** Format: date-time */
      lastStartTime?: string | null;
      trigger?: components['schemas']['CommandTrigger'];
      suppressMessages?: boolean;
      clientUserAgent?: string | null;
    };
    /** @enum {string} */
    CommandPriority: 'normal' | 'high' | 'low';
    CommandResource: {
      /** Format: int32 */
      id?: number;
      name?: string | null;
      commandName?: string | null;
      message?: string | null;
      body?: components['schemas']['Command'];
      priority?: components['schemas']['CommandPriority'];
      status?: components['schemas']['CommandStatus'];
      result?: components['schemas']['CommandResult'];
      /** Format: date-time */
      queued?: string;
      /** Format: date-time */
      started?: string | null;
      /** Format: date-time */
      ended?: string | null;
      duration?: components['schemas']['TimeSpan'];
      exception?: string | null;
      trigger?: components['schemas']['CommandTrigger'];
      clientUserAgent?: string | null;
      /** Format: date-time */
      stateChangeTime?: string | null;
      sendUpdatesToClient?: boolean;
      updateScheduledTask?: boolean;
      /** Format: date-time */
      lastExecutionTime?: string | null;
    };
    /** @enum {string} */
    CommandResult: 'unknown' | 'successful' | 'unsuccessful';
    /** @enum {string} */
    CommandStatus:
      | 'queued'
      | 'started'
      | 'completed'
      | 'failed'
      | 'aborted'
      | 'cancelled'
      | 'orphaned';
    /** @enum {string} */
    CommandTrigger: 'unspecified' | 'manual' | 'scheduled';
    CustomFilterResource: {
      /** Format: int32 */
      id?: number;
      type?: string | null;
      label?: string | null;
      filters?:
        | {
            [key: string]: unknown;
          }[]
        | null;
    };
    CustomFormatResource: {
      /** Format: int32 */
      id?: number;
      name?: string | null;
      includeCustomFormatWhenRenaming?: boolean | null;
      specifications?:
        | components['schemas']['CustomFormatSpecificationSchema'][]
        | null;
    };
    CustomFormatSpecificationSchema: {
      /** Format: int32 */
      id?: number;
      name?: string | null;
      implementation?: string | null;
      implementationName?: string | null;
      infoLink?: string | null;
      negate?: boolean;
      required?: boolean;
      fields?: components['schemas']['Field'][] | null;
      presets?:
        | components['schemas']['CustomFormatSpecificationSchema'][]
        | null;
    };
    /** @enum {string} */
    DatabaseType: 'sqLite' | 'postgreSQL';
    DelayProfileResource: {
      /** Format: int32 */
      id?: number;
      enableUsenet?: boolean;
      enableTorrent?: boolean;
      preferredProtocol?: components['schemas']['DownloadProtocol'];
      /** Format: int32 */
      usenetDelay?: number;
      /** Format: int32 */
      torrentDelay?: number;
      bypassIfHighestQuality?: boolean;
      bypassIfAboveCustomFormatScore?: boolean;
      /** Format: int32 */
      minimumCustomFormatScore?: number;
      /** Format: int32 */
      order?: number;
      tags?: number[] | null;
    };
    DiskSpaceResource: {
      /** Format: int32 */
      id?: number;
      path?: string | null;
      label?: string | null;
      /** Format: int64 */
      freeSpace?: number;
      /** Format: int64 */
      totalSpace?: number;
    };
    DownloadClientBulkResource: {
      ids?: number[] | null;
      tags?: number[] | null;
      applyTags?: components['schemas']['ApplyTags'];
      enable?: boolean | null;
      /** Format: int32 */
      priority?: number | null;
      removeCompletedDownloads?: boolean | null;
      removeFailedDownloads?: boolean | null;
    };
    DownloadClientConfigResource: {
      /** Format: int32 */
      id?: number;
      downloadClientWorkingFolders?: string | null;
      enableCompletedDownloadHandling?: boolean;
      autoRedownloadFailed?: boolean;
      autoRedownloadFailedFromInteractiveSearch?: boolean;
    };
    DownloadClientResource: {
      /** Format: int32 */
      id?: number;
      name?: string | null;
      fields?: components['schemas']['Field'][] | null;
      implementationName?: string | null;
      implementation?: string | null;
      configContract?: string | null;
      infoLink?: string | null;
      message?: components['schemas']['ProviderMessage'];
      tags?: number[] | null;
      presets?: components['schemas']['DownloadClientResource'][] | null;
      enable?: boolean;
      protocol?: components['schemas']['DownloadProtocol'];
      /** Format: int32 */
      priority?: number;
      removeCompletedDownloads?: boolean;
      removeFailedDownloads?: boolean;
    };
    /** @enum {string} */
    DownloadProtocol: 'unknown' | 'usenet' | 'torrent';
    EpisodeFileListResource: {
      episodeFileIds?: number[] | null;
      languages?: components['schemas']['Language'][] | null;
      quality?: components['schemas']['QualityModel'];
      sceneName?: string | null;
      releaseGroup?: string | null;
    };
    EpisodeFileResource: {
      /** Format: int32 */
      id?: number;
      /** Format: int32 */
      seriesId?: number;
      /** Format: int32 */
      seasonNumber?: number;
      relativePath?: string | null;
      path?: string | null;
      /** Format: int64 */
      size?: number;
      /** Format: date-time */
      dateAdded?: string;
      sceneName?: string | null;
      releaseGroup?: string | null;
      languages?: components['schemas']['Language'][] | null;
      quality?: components['schemas']['QualityModel'];
      customFormats?: components['schemas']['CustomFormatResource'][] | null;
      /** Format: int32 */
      customFormatScore?: number;
      mediaInfo?: components['schemas']['MediaInfoResource'];
      qualityCutoffNotMet?: boolean;
    };
    /** @enum {string} */
    EpisodeHistoryEventType:
      | 'unknown'
      | 'grabbed'
      | 'seriesFolderImported'
      | 'downloadFolderImported'
      | 'downloadFailed'
      | 'episodeFileDeleted'
      | 'episodeFileRenamed'
      | 'downloadIgnored';
    EpisodeResource: {
      /** Format: int32 */
      id?: number;
      /** Format: int32 */
      seriesId?: number;
      /** Format: int32 */
      tvdbId?: number;
      /** Format: int32 */
      episodeFileId?: number;
      /** Format: int32 */
      seasonNumber?: number;
      /** Format: int32 */
      episodeNumber?: number;
      title?: string | null;
      airDate?: string | null;
      /** Format: date-time */
      airDateUtc?: string | null;
      /** Format: int32 */
      runtime?: number;
      finaleType?: string | null;
      overview?: string | null;
      episodeFile?: components['schemas']['EpisodeFileResource'];
      hasFile?: boolean;
      monitored?: boolean;
      /** Format: int32 */
      absoluteEpisodeNumber?: number | null;
      /** Format: int32 */
      sceneAbsoluteEpisodeNumber?: number | null;
      /** Format: int32 */
      sceneEpisodeNumber?: number | null;
      /** Format: int32 */
      sceneSeasonNumber?: number | null;
      unverifiedSceneNumbering?: boolean;
      /** Format: date-time */
      endTime?: string | null;
      /** Format: date-time */
      grabDate?: string | null;
      seriesTitle?: string | null;
      series?: components['schemas']['SeriesResource'];
      images?: components['schemas']['MediaCover'][] | null;
      grabbed?: boolean;
    };
    EpisodeResourcePagingResource: {
      /** Format: int32 */
      page?: number;
      /** Format: int32 */
      pageSize?: number;
      sortKey?: string | null;
      sortDirection?: components['schemas']['SortDirection'];
      /** Format: int32 */
      totalRecords?: number;
      records?: components['schemas']['EpisodeResource'][] | null;
    };
    /** @enum {string} */
    EpisodeTitleRequiredType: 'always' | 'bulkSeasonReleases' | 'never';
    EpisodesMonitoredResource: {
      episodeIds?: number[] | null;
      monitored?: boolean;
    };
    Field: {
      /** Format: int32 */
      order?: number;
      name?: string | null;
      label?: string | null;
      unit?: string | null;
      helpText?: string | null;
      helpTextWarning?: string | null;
      helpLink?: string | null;
      value?: Record<string, unknown> | null;
      type?: string | null;
      advanced?: boolean;
      selectOptions?: components['schemas']['SelectOption'][] | null;
      selectOptionsProviderAction?: string | null;
      section?: string | null;
      hidden?: string | null;
      privacy?: components['schemas']['PrivacyLevel'];
      placeholder?: string | null;
      isFloat?: boolean;
    };
    /** @enum {string} */
    FileDateType: 'none' | 'localAirDate' | 'utcAirDate';
    /** @enum {string} */
    HealthCheckResult: 'ok' | 'notice' | 'warning' | 'error';
    HealthResource: {
      /** Format: int32 */
      id?: number;
      source?: string | null;
      type?: components['schemas']['HealthCheckResult'];
      message?: string | null;
      wikiUrl?: components['schemas']['HttpUri'];
    };
    HistoryResource: {
      /** Format: int32 */
      id?: number;
      /** Format: int32 */
      episodeId?: number;
      /** Format: int32 */
      seriesId?: number;
      sourceTitle?: string | null;
      languages?: components['schemas']['Language'][] | null;
      quality?: components['schemas']['QualityModel'];
      customFormats?: components['schemas']['CustomFormatResource'][] | null;
      /** Format: int32 */
      customFormatScore?: number;
      qualityCutoffNotMet?: boolean;
      /** Format: date-time */
      date?: string;
      downloadId?: string | null;
      eventType?: components['schemas']['EpisodeHistoryEventType'];
      data?: {
        [key: string]: string | null;
      } | null;
      episode?: components['schemas']['EpisodeResource'];
      series?: components['schemas']['SeriesResource'];
    };
    HistoryResourcePagingResource: {
      /** Format: int32 */
      page?: number;
      /** Format: int32 */
      pageSize?: number;
      sortKey?: string | null;
      sortDirection?: components['schemas']['SortDirection'];
      /** Format: int32 */
      totalRecords?: number;
      records?: components['schemas']['HistoryResource'][] | null;
    };
    HostConfigResource: {
      /** Format: int32 */
      id?: number;
      bindAddress?: string | null;
      /** Format: int32 */
      port?: number;
      /** Format: int32 */
      sslPort?: number;
      enableSsl?: boolean;
      launchBrowser?: boolean;
      authenticationMethod?: components['schemas']['AuthenticationType'];
      authenticationRequired?: components['schemas']['AuthenticationRequiredType'];
      analyticsEnabled?: boolean;
      username?: string | null;
      password?: string | null;
      logLevel?: string | null;
      consoleLogLevel?: string | null;
      branch?: string | null;
      apiKey?: string | null;
      sslCertPath?: string | null;
      sslCertPassword?: string | null;
      urlBase?: string | null;
      instanceName?: string | null;
      applicationUrl?: string | null;
      updateAutomatically?: boolean;
      updateMechanism?: components['schemas']['UpdateMechanism'];
      updateScriptPath?: string | null;
      proxyEnabled?: boolean;
      proxyType?: components['schemas']['ProxyType'];
      proxyHostname?: string | null;
      /** Format: int32 */
      proxyPort?: number;
      proxyUsername?: string | null;
      proxyPassword?: string | null;
      proxyBypassFilter?: string | null;
      proxyBypassLocalAddresses?: boolean;
      certificateValidation?: components['schemas']['CertificateValidationType'];
      backupFolder?: string | null;
      /** Format: int32 */
      backupInterval?: number;
      /** Format: int32 */
      backupRetention?: number;
    };
    HttpUri: {
      fullUri?: string | null;
      scheme?: string | null;
      host?: string | null;
      /** Format: int32 */
      port?: number | null;
      path?: string | null;
      query?: string | null;
      fragment?: string | null;
    };
    ImportListBulkResource: {
      ids?: number[] | null;
      tags?: number[] | null;
      applyTags?: components['schemas']['ApplyTags'];
      enableAutomaticAdd?: boolean | null;
      rootFolderPath?: string | null;
      /** Format: int32 */
      qualityProfileId?: number | null;
    };
    ImportListExclusionResource: {
      /** Format: int32 */
      id?: number;
      /** Format: int32 */
      tvdbId?: number;
      title?: string | null;
    };
    ImportListResource: {
      /** Format: int32 */
      id?: number;
      name?: string | null;
      fields?: components['schemas']['Field'][] | null;
      implementationName?: string | null;
      implementation?: string | null;
      configContract?: string | null;
      infoLink?: string | null;
      message?: components['schemas']['ProviderMessage'];
      tags?: number[] | null;
      presets?: components['schemas']['ImportListResource'][] | null;
      enableAutomaticAdd?: boolean;
      searchForMissingEpisodes?: boolean;
      shouldMonitor?: components['schemas']['MonitorTypes'];
      rootFolderPath?: string | null;
      /** Format: int32 */
      qualityProfileId?: number;
      seriesType?: components['schemas']['SeriesTypes'];
      seasonFolder?: boolean;
      listType?: components['schemas']['ImportListType'];
      /** Format: int32 */
      listOrder?: number;
      minRefreshInterval?: components['schemas']['TimeSpan'];
    };
    /** @enum {string} */
    ImportListType:
      | 'program'
      | 'plex'
      | 'trakt'
      | 'simkl'
      | 'other'
      | 'advanced';
    IndexerBulkResource: {
      ids?: number[] | null;
      tags?: number[] | null;
      applyTags?: components['schemas']['ApplyTags'];
      enableRss?: boolean | null;
      enableAutomaticSearch?: boolean | null;
      enableInteractiveSearch?: boolean | null;
      /** Format: int32 */
      priority?: number | null;
    };
    IndexerConfigResource: {
      /** Format: int32 */
      id?: number;
      /** Format: int32 */
      minimumAge?: number;
      /** Format: int32 */
      retention?: number;
      /** Format: int32 */
      maximumSize?: number;
      /** Format: int32 */
      rssSyncInterval?: number;
    };
    IndexerResource: {
      /** Format: int32 */
      id?: number;
      name?: string | null;
      fields?: components['schemas']['Field'][] | null;
      implementationName?: string | null;
      implementation?: string | null;
      configContract?: string | null;
      infoLink?: string | null;
      message?: components['schemas']['ProviderMessage'];
      tags?: number[] | null;
      presets?: components['schemas']['IndexerResource'][] | null;
      enableRss?: boolean;
      enableAutomaticSearch?: boolean;
      enableInteractiveSearch?: boolean;
      supportsRss?: boolean;
      supportsSearch?: boolean;
      protocol?: components['schemas']['DownloadProtocol'];
      /** Format: int32 */
      priority?: number;
      /** Format: int32 */
      seasonSearchMaximumSingleEpisodeAge?: number;
      /** Format: int32 */
      downloadClientId?: number;
    };
    Language: {
      /** Format: int32 */
      id?: number;
      name?: string | null;
    };
    LanguageProfileItemResource: {
      /** Format: int32 */
      id?: number;
      language?: components['schemas']['Language'];
      allowed?: boolean;
    };
    LanguageProfileResource: {
      /** Format: int32 */
      id?: number;
      name?: string | null;
      upgradeAllowed?: boolean;
      cutoff?: components['schemas']['Language'];
      languages?: components['schemas']['LanguageProfileItemResource'][] | null;
    };
    LanguageResource: {
      /** Format: int32 */
      id?: number;
      name?: string | null;
      nameLower?: string | null;
    };
    LocalizationLanguageResource: {
      identifier?: string | null;
    };
    LocalizationResource: {
      /** Format: int32 */
      id?: number;
      strings?: {
        [key: string]: string | null;
      } | null;
    };
    LogFileResource: {
      /** Format: int32 */
      id?: number;
      filename?: string | null;
      /** Format: date-time */
      lastWriteTime?: string;
      contentsUrl?: string | null;
      downloadUrl?: string | null;
    };
    LogResource: {
      /** Format: int32 */
      id?: number;
      /** Format: date-time */
      time?: string;
      exception?: string | null;
      exceptionType?: string | null;
      level?: string | null;
      logger?: string | null;
      message?: string | null;
      method?: string | null;
    };
    LogResourcePagingResource: {
      /** Format: int32 */
      page?: number;
      /** Format: int32 */
      pageSize?: number;
      sortKey?: string | null;
      sortDirection?: components['schemas']['SortDirection'];
      /** Format: int32 */
      totalRecords?: number;
      records?: components['schemas']['LogResource'][] | null;
    };
    ManualImportReprocessResource: {
      /** Format: int32 */
      id?: number;
      path?: string | null;
      /** Format: int32 */
      seriesId?: number;
      /** Format: int32 */
      seasonNumber?: number | null;
      episodes?: components['schemas']['EpisodeResource'][] | null;
      episodeIds?: number[] | null;
      quality?: components['schemas']['QualityModel'];
      languages?: components['schemas']['Language'][] | null;
      releaseGroup?: string | null;
      downloadId?: string | null;
      customFormats?: components['schemas']['CustomFormatResource'][] | null;
      /** Format: int32 */
      customFormatScore?: number;
      rejections?: components['schemas']['Rejection'][] | null;
    };
    ManualImportResource: {
      /** Format: int32 */
      id?: number;
      path?: string | null;
      relativePath?: string | null;
      folderName?: string | null;
      name?: string | null;
      /** Format: int64 */
      size?: number;
      series?: components['schemas']['SeriesResource'];
      /** Format: int32 */
      seasonNumber?: number | null;
      episodes?: components['schemas']['EpisodeResource'][] | null;
      /** Format: int32 */
      episodeFileId?: number | null;
      releaseGroup?: string | null;
      quality?: components['schemas']['QualityModel'];
      languages?: components['schemas']['Language'][] | null;
      /** Format: int32 */
      qualityWeight?: number;
      downloadId?: string | null;
      customFormats?: components['schemas']['CustomFormatResource'][] | null;
      /** Format: int32 */
      customFormatScore?: number;
      rejections?: components['schemas']['Rejection'][] | null;
    };
    MediaCover: {
      coverType?: components['schemas']['MediaCoverTypes'];
      url?: string | null;
      remoteUrl?: string | null;
    };
    /** @enum {string} */
    MediaCoverTypes:
      | 'unknown'
      | 'poster'
      | 'banner'
      | 'fanart'
      | 'screenshot'
      | 'headshot'
      | 'clearlogo';
    MediaInfoResource: {
      /** Format: int32 */
      id?: number;
      /** Format: int64 */
      audioBitrate?: number;
      /** Format: double */
      audioChannels?: number;
      audioCodec?: string | null;
      audioLanguages?: string | null;
      /** Format: int32 */
      audioStreamCount?: number;
      /** Format: int32 */
      videoBitDepth?: number;
      /** Format: int64 */
      videoBitrate?: number;
      videoCodec?: string | null;
      /** Format: double */
      videoFps?: number;
      videoDynamicRange?: string | null;
      videoDynamicRangeType?: string | null;
      resolution?: string | null;
      runTime?: string | null;
      scanType?: string | null;
      subtitles?: string | null;
    };
    MediaManagementConfigResource: {
      /** Format: int32 */
      id?: number;
      autoUnmonitorPreviouslyDownloadedEpisodes?: boolean;
      recycleBin?: string | null;
      /** Format: int32 */
      recycleBinCleanupDays?: number;
      downloadPropersAndRepacks?: components['schemas']['ProperDownloadTypes'];
      createEmptySeriesFolders?: boolean;
      deleteEmptyFolders?: boolean;
      fileDate?: components['schemas']['FileDateType'];
      rescanAfterRefresh?: components['schemas']['RescanAfterRefreshType'];
      setPermissionsLinux?: boolean;
      chmodFolder?: string | null;
      chownGroup?: string | null;
      episodeTitleRequired?: components['schemas']['EpisodeTitleRequiredType'];
      skipFreeSpaceCheckWhenImporting?: boolean;
      /** Format: int32 */
      minimumFreeSpaceWhenImporting?: number;
      copyUsingHardlinks?: boolean;
      useScriptImport?: boolean;
      scriptImportPath?: string | null;
      importExtraFiles?: boolean;
      extraFileExtensions?: string | null;
      enableMediaInfo?: boolean;
    };
    MetadataResource: {
      /** Format: int32 */
      id?: number;
      name?: string | null;
      fields?: components['schemas']['Field'][] | null;
      implementationName?: string | null;
      implementation?: string | null;
      configContract?: string | null;
      infoLink?: string | null;
      message?: components['schemas']['ProviderMessage'];
      tags?: number[] | null;
      presets?: components['schemas']['MetadataResource'][] | null;
      enable?: boolean;
    };
    /** @enum {string} */
    MonitorTypes:
      | 'unknown'
      | 'all'
      | 'future'
      | 'missing'
      | 'existing'
      | 'firstSeason'
      | 'latestSeason'
      | 'pilot'
      | 'monitorSpecials'
      | 'unmonitorSpecials'
      | 'none';
    MonitoringOptions: {
      ignoreEpisodesWithFiles?: boolean;
      ignoreEpisodesWithoutFiles?: boolean;
      monitor?: components['schemas']['MonitorTypes'];
    };
    NamingConfigResource: {
      /** Format: int32 */
      id?: number;
      renameEpisodes?: boolean;
      replaceIllegalCharacters?: boolean;
      /** Format: int32 */
      colonReplacementFormat?: number;
      /** Format: int32 */
      multiEpisodeStyle?: number;
      standardEpisodeFormat?: string | null;
      dailyEpisodeFormat?: string | null;
      animeEpisodeFormat?: string | null;
      seriesFolderFormat?: string | null;
      seasonFolderFormat?: string | null;
      specialsFolderFormat?: string | null;
      includeSeriesTitle?: boolean;
      includeEpisodeTitle?: boolean;
      includeQuality?: boolean;
      replaceSpaces?: boolean;
      separator?: string | null;
      numberStyle?: string | null;
    };
    NotificationResource: {
      /** Format: int32 */
      id?: number;
      name?: string | null;
      fields?: components['schemas']['Field'][] | null;
      implementationName?: string | null;
      implementation?: string | null;
      configContract?: string | null;
      infoLink?: string | null;
      message?: components['schemas']['ProviderMessage'];
      tags?: number[] | null;
      presets?: components['schemas']['NotificationResource'][] | null;
      link?: string | null;
      onGrab?: boolean;
      onDownload?: boolean;
      onUpgrade?: boolean;
      onRename?: boolean;
      onSeriesAdd?: boolean;
      onSeriesDelete?: boolean;
      onEpisodeFileDelete?: boolean;
      onEpisodeFileDeleteForUpgrade?: boolean;
      onHealthIssue?: boolean;
      onHealthRestored?: boolean;
      onApplicationUpdate?: boolean;
      onManualInteractionRequired?: boolean;
      supportsOnGrab?: boolean;
      supportsOnDownload?: boolean;
      supportsOnUpgrade?: boolean;
      supportsOnRename?: boolean;
      supportsOnSeriesAdd?: boolean;
      supportsOnSeriesDelete?: boolean;
      supportsOnEpisodeFileDelete?: boolean;
      supportsOnEpisodeFileDeleteForUpgrade?: boolean;
      supportsOnHealthIssue?: boolean;
      supportsOnHealthRestored?: boolean;
      supportsOnApplicationUpdate?: boolean;
      supportsOnManualInteractionRequired?: boolean;
      includeHealthWarnings?: boolean;
      testCommand?: string | null;
    };
    ParseResource: {
      /** Format: int32 */
      id?: number;
      title?: string | null;
      parsedEpisodeInfo?: components['schemas']['ParsedEpisodeInfo'];
      series?: components['schemas']['SeriesResource'];
      episodes?: components['schemas']['EpisodeResource'][] | null;
      languages?: components['schemas']['Language'][] | null;
      customFormats?: components['schemas']['CustomFormatResource'][] | null;
      /** Format: int32 */
      customFormatScore?: number;
    };
    ParsedEpisodeInfo: {
      releaseTitle?: string | null;
      seriesTitle?: string | null;
      seriesTitleInfo?: components['schemas']['SeriesTitleInfo'];
      quality?: components['schemas']['QualityModel'];
      /** Format: int32 */
      seasonNumber?: number;
      episodeNumbers?: number[] | null;
      absoluteEpisodeNumbers?: number[] | null;
      specialAbsoluteEpisodeNumbers?: number[] | null;
      airDate?: string | null;
      languages?: components['schemas']['Language'][] | null;
      fullSeason?: boolean;
      isPartialSeason?: boolean;
      isMultiSeason?: boolean;
      isSeasonExtra?: boolean;
      special?: boolean;
      releaseGroup?: string | null;
      releaseHash?: string | null;
      /** Format: int32 */
      seasonPart?: number;
      releaseTokens?: string | null;
      /** Format: int32 */
      dailyPart?: number | null;
      isDaily?: boolean;
      isAbsoluteNumbering?: boolean;
      isPossibleSpecialEpisode?: boolean;
      isPossibleSceneSeasonSpecial?: boolean;
    };
    PingResource: {
      status?: string | null;
    };
    /** @enum {string} */
    PrivacyLevel: 'normal' | 'password' | 'apiKey' | 'userName';
    ProfileFormatItemResource: {
      /** Format: int32 */
      id?: number;
      /** Format: int32 */
      format?: number;
      name?: string | null;
      /** Format: int32 */
      score?: number;
    };
    /** @enum {string} */
    ProperDownloadTypes: 'preferAndUpgrade' | 'doNotUpgrade' | 'doNotPrefer';
    ProviderMessage: {
      message?: string | null;
      type?: components['schemas']['ProviderMessageType'];
    };
    /** @enum {string} */
    ProviderMessageType: 'info' | 'warning' | 'error';
    /** @enum {string} */
    ProxyType: 'http' | 'socks4' | 'socks5';
    Quality: {
      /** Format: int32 */
      id?: number;
      name?: string | null;
      source?: components['schemas']['QualitySource'];
      /** Format: int32 */
      resolution?: number;
    };
    QualityDefinitionResource: {
      /** Format: int32 */
      id?: number;
      quality?: components['schemas']['Quality'];
      title?: string | null;
      /** Format: int32 */
      weight?: number;
      /** Format: double */
      minSize?: number | null;
      /** Format: double */
      maxSize?: number | null;
      /** Format: double */
      preferredSize?: number | null;
    };
    QualityModel: {
      quality?: components['schemas']['Quality'];
      revision?: components['schemas']['Revision'];
    };
    QualityProfileQualityItemResource: {
      /** Format: int32 */
      id?: number;
      name?: string | null;
      quality?: components['schemas']['Quality'];
      items?:
        | components['schemas']['QualityProfileQualityItemResource'][]
        | null;
      allowed?: boolean;
    };
    QualityProfileResource: {
      /** Format: int32 */
      id?: number;
      name?: string | null;
      upgradeAllowed?: boolean;
      /** Format: int32 */
      cutoff?: number;
      items?:
        | components['schemas']['QualityProfileQualityItemResource'][]
        | null;
      /** Format: int32 */
      minFormatScore?: number;
      /** Format: int32 */
      cutoffFormatScore?: number;
      formatItems?: components['schemas']['ProfileFormatItemResource'][] | null;
    };
    /** @enum {string} */
    QualitySource:
      | 'unknown'
      | 'television'
      | 'televisionRaw'
      | 'web'
      | 'webRip'
      | 'dvd'
      | 'bluray'
      | 'blurayRaw';
    QueueBulkResource: {
      ids?: number[] | null;
    };
    QueueResource: {
      /** Format: int32 */
      id?: number;
      /** Format: int32 */
      seriesId?: number | null;
      /** Format: int32 */
      episodeId?: number | null;
      /** Format: int32 */
      seasonNumber?: number | null;
      series?: components['schemas']['SeriesResource'];
      episode?: components['schemas']['EpisodeResource'];
      languages?: components['schemas']['Language'][] | null;
      quality?: components['schemas']['QualityModel'];
      customFormats?: components['schemas']['CustomFormatResource'][] | null;
      /** Format: int32 */
      customFormatScore?: number;
      /** Format: double */
      size?: number;
      title?: string | null;
      /** Format: double */
      sizeleft?: number;
      timeleft?: components['schemas']['TimeSpan'];
      /** Format: date-time */
      estimatedCompletionTime?: string | null;
      status?: string | null;
      trackedDownloadStatus?: components['schemas']['TrackedDownloadStatus'];
      trackedDownloadState?: components['schemas']['TrackedDownloadState'];
      statusMessages?:
        | components['schemas']['TrackedDownloadStatusMessage'][]
        | null;
      errorMessage?: string | null;
      downloadId?: string | null;
      protocol?: components['schemas']['DownloadProtocol'];
      downloadClient?: string | null;
      indexer?: string | null;
      outputPath?: string | null;
      episodeHasFile?: boolean;
    };
    QueueResourcePagingResource: {
      /** Format: int32 */
      page?: number;
      /** Format: int32 */
      pageSize?: number;
      sortKey?: string | null;
      sortDirection?: components['schemas']['SortDirection'];
      /** Format: int32 */
      totalRecords?: number;
      records?: components['schemas']['QueueResource'][] | null;
    };
    QueueStatusResource: {
      /** Format: int32 */
      id?: number;
      /** Format: int32 */
      totalCount?: number;
      /** Format: int32 */
      count?: number;
      /** Format: int32 */
      unknownCount?: number;
      errors?: boolean;
      warnings?: boolean;
      unknownErrors?: boolean;
      unknownWarnings?: boolean;
    };
    Ratings: {
      /** Format: int32 */
      votes?: number;
      /** Format: double */
      value?: number;
    };
    Rejection: {
      reason?: string | null;
      type?: components['schemas']['RejectionType'];
    };
    /** @enum {string} */
    RejectionType: 'permanent' | 'temporary';
    ReleaseEpisodeResource: {
      /** Format: int32 */
      id?: number;
      /** Format: int32 */
      seasonNumber?: number;
      /** Format: int32 */
      episodeNumber?: number;
      /** Format: int32 */
      absoluteEpisodeNumber?: number | null;
      title?: string | null;
    };
    ReleaseProfileResource: {
      /** Format: int32 */
      id?: number;
      name?: string | null;
      enabled?: boolean;
      required?: Record<string, unknown> | null;
      ignored?: Record<string, unknown> | null;
      /** Format: int32 */
      indexerId?: number;
      tags?: number[] | null;
    };
    ReleaseResource: {
      /** Format: int32 */
      id?: number;
      guid?: string | null;
      quality?: components['schemas']['QualityModel'];
      /** Format: int32 */
      qualityWeight?: number;
      /** Format: int32 */
      age?: number;
      /** Format: double */
      ageHours?: number;
      /** Format: double */
      ageMinutes?: number;
      /** Format: int64 */
      size?: number;
      /** Format: int32 */
      indexerId?: number;
      indexer?: string | null;
      releaseGroup?: string | null;
      subGroup?: string | null;
      releaseHash?: string | null;
      title?: string | null;
      fullSeason?: boolean;
      sceneSource?: boolean;
      /** Format: int32 */
      seasonNumber?: number;
      languages?: components['schemas']['Language'][] | null;
      /** Format: int32 */
      languageWeight?: number;
      airDate?: string | null;
      seriesTitle?: string | null;
      episodeNumbers?: number[] | null;
      absoluteEpisodeNumbers?: number[] | null;
      /** Format: int32 */
      mappedSeasonNumber?: number | null;
      mappedEpisodeNumbers?: number[] | null;
      mappedAbsoluteEpisodeNumbers?: number[] | null;
      /** Format: int32 */
      mappedSeriesId?: number | null;
      mappedEpisodeInfo?:
        | components['schemas']['ReleaseEpisodeResource'][]
        | null;
      approved?: boolean;
      temporarilyRejected?: boolean;
      rejected?: boolean;
      /** Format: int32 */
      tvdbId?: number;
      /** Format: int32 */
      tvRageId?: number;
      rejections?: string[] | null;
      /** Format: date-time */
      publishDate?: string;
      commentUrl?: string | null;
      downloadUrl?: string | null;
      infoUrl?: string | null;
      episodeRequested?: boolean;
      downloadAllowed?: boolean;
      /** Format: int32 */
      releaseWeight?: number;
      customFormats?: components['schemas']['CustomFormatResource'][] | null;
      /** Format: int32 */
      customFormatScore?: number;
      sceneMapping?: components['schemas']['AlternateTitleResource'];
      magnetUrl?: string | null;
      infoHash?: string | null;
      /** Format: int32 */
      seeders?: number | null;
      /** Format: int32 */
      leechers?: number | null;
      protocol?: components['schemas']['DownloadProtocol'];
      isDaily?: boolean;
      isAbsoluteNumbering?: boolean;
      isPossibleSpecialEpisode?: boolean;
      special?: boolean;
      /** Format: int32 */
      seriesId?: number | null;
      /** Format: int32 */
      episodeId?: number | null;
      episodeIds?: number[] | null;
      /** Format: int32 */
      downloadClientId?: number | null;
      shouldOverride?: boolean | null;
    };
    RemotePathMappingResource: {
      /** Format: int32 */
      id?: number;
      host?: string | null;
      remotePath?: string | null;
      localPath?: string | null;
    };
    RenameEpisodeResource: {
      /** Format: int32 */
      id?: number;
      /** Format: int32 */
      seriesId?: number;
      /** Format: int32 */
      seasonNumber?: number;
      episodeNumbers?: number[] | null;
      /** Format: int32 */
      episodeFileId?: number;
      existingPath?: string | null;
      newPath?: string | null;
    };
    /** @enum {string} */
    RescanAfterRefreshType: 'always' | 'afterManual' | 'never';
    Revision: {
      /** Format: int32 */
      version?: number;
      /** Format: int32 */
      real?: number;
      isRepack?: boolean;
    };
    RootFolderResource: {
      /** Format: int32 */
      id?: number;
      path?: string | null;
      accessible?: boolean;
      /** Format: int64 */
      freeSpace?: number | null;
      unmappedFolders?: components['schemas']['UnmappedFolder'][] | null;
    };
    /** @enum {string} */
    RuntimeMode: 'console' | 'service' | 'tray';
    SeasonPassResource: {
      series?: components['schemas']['SeasonPassSeriesResource'][] | null;
      monitoringOptions?: components['schemas']['MonitoringOptions'];
    };
    SeasonPassSeriesResource: {
      /** Format: int32 */
      id?: number;
      monitored?: boolean | null;
      seasons?: components['schemas']['SeasonResource'][] | null;
    };
    SeasonResource: {
      /** Format: int32 */
      seasonNumber?: number;
      monitored?: boolean;
      statistics?: components['schemas']['SeasonStatisticsResource'];
      images?: components['schemas']['MediaCover'][] | null;
    };
    SeasonStatisticsResource: {
      /** Format: date-time */
      nextAiring?: string | null;
      /** Format: date-time */
      previousAiring?: string | null;
      /** Format: int32 */
      episodeFileCount?: number;
      /** Format: int32 */
      episodeCount?: number;
      /** Format: int32 */
      totalEpisodeCount?: number;
      /** Format: int64 */
      sizeOnDisk?: number;
      releaseGroups?: string[] | null;
      /** Format: double */
      percentOfEpisodes?: number;
    };
    SelectOption: {
      /** Format: int32 */
      value?: number;
      name?: string | null;
      /** Format: int32 */
      order?: number;
      hint?: string | null;
    };
    SeriesEditorResource: {
      seriesIds?: number[] | null;
      monitored?: boolean | null;
      /** Format: int32 */
      qualityProfileId?: number | null;
      seriesType?: components['schemas']['SeriesTypes'];
      seasonFolder?: boolean | null;
      rootFolderPath?: string | null;
      tags?: number[] | null;
      applyTags?: components['schemas']['ApplyTags'];
      moveFiles?: boolean;
      deleteFiles?: boolean;
      addImportListExclusion?: boolean;
    };
    SeriesResource: {
      /** Format: int32 */
      id?: number;
      title?: string | null;
      alternateTitles?:
        | components['schemas']['AlternateTitleResource'][]
        | null;
      sortTitle?: string | null;
      status?: components['schemas']['SeriesStatusType'];
      ended?: boolean;
      profileName?: string | null;
      overview?: string | null;
      /** Format: date-time */
      nextAiring?: string | null;
      /** Format: date-time */
      previousAiring?: string | null;
      network?: string | null;
      airTime?: string | null;
      images?: components['schemas']['MediaCover'][] | null;
      originalLanguage?: components['schemas']['Language'];
      remotePoster?: string | null;
      seasons?: components['schemas']['SeasonResource'][] | null;
      /** Format: int32 */
      year?: number;
      path?: string | null;
      /** Format: int32 */
      qualityProfileId?: number;
      seasonFolder?: boolean;
      monitored?: boolean;
      useSceneNumbering?: boolean;
      /** Format: int32 */
      runtime?: number;
      /** Format: int32 */
      tvdbId?: number;
      /** Format: int32 */
      tvRageId?: number;
      /** Format: int32 */
      tvMazeId?: number;
      /** Format: date-time */
      firstAired?: string | null;
      /** Format: date-time */
      lastAired?: string | null;
      seriesType?: components['schemas']['SeriesTypes'];
      cleanTitle?: string | null;
      imdbId?: string | null;
      titleSlug?: string | null;
      rootFolderPath?: string | null;
      folder?: string | null;
      certification?: string | null;
      genres?: string[] | null;
      tags?: number[] | null;
      /** Format: date-time */
      added?: string;
      addOptions?: components['schemas']['AddSeriesOptions'];
      ratings?: components['schemas']['Ratings'];
      statistics?: components['schemas']['SeriesStatisticsResource'];
      episodesChanged?: boolean | null;
      /**
       * Format: int32
       * @deprecated
       */
      languageProfileId?: number;
    };
    SeriesStatisticsResource: {
      /** Format: int32 */
      seasonCount?: number;
      /** Format: int32 */
      episodeFileCount?: number;
      /** Format: int32 */
      episodeCount?: number;
      /** Format: int32 */
      totalEpisodeCount?: number;
      /** Format: int64 */
      sizeOnDisk?: number;
      releaseGroups?: string[] | null;
      /** Format: double */
      percentOfEpisodes?: number;
    };
    /** @enum {string} */
    SeriesStatusType: 'continuing' | 'ended' | 'upcoming' | 'deleted';
    SeriesTitleInfo: {
      title?: string | null;
      titleWithoutYear?: string | null;
      /** Format: int32 */
      year?: number;
      allTitles?: string[] | null;
    };
    /** @enum {string} */
    SeriesTypes: 'standard' | 'daily' | 'anime';
    /** @enum {string} */
    SortDirection: 'default' | 'ascending' | 'descending';
    SystemResource: {
      appName?: string | null;
      instanceName?: string | null;
      version?: string | null;
      /** Format: date-time */
      buildTime?: string;
      isDebug?: boolean;
      isProduction?: boolean;
      isAdmin?: boolean;
      isUserInteractive?: boolean;
      startupPath?: string | null;
      appData?: string | null;
      osName?: string | null;
      osVersion?: string | null;
      isNetCore?: boolean;
      isLinux?: boolean;
      isOsx?: boolean;
      isWindows?: boolean;
      isDocker?: boolean;
      mode?: components['schemas']['RuntimeMode'];
      branch?: string | null;
      authentication?: components['schemas']['AuthenticationType'];
      sqliteVersion?: components['schemas']['Version'];
      /** Format: int32 */
      migrationVersion?: number;
      urlBase?: string | null;
      runtimeVersion?: components['schemas']['Version'];
      runtimeName?: string | null;
      /** Format: date-time */
      startTime?: string;
      packageVersion?: string | null;
      packageAuthor?: string | null;
      packageUpdateMechanism?: components['schemas']['UpdateMechanism'];
      packageUpdateMechanismMessage?: string | null;
      databaseVersion?: components['schemas']['Version'];
      databaseType?: components['schemas']['DatabaseType'];
    };
    TagDetailsResource: {
      /** Format: int32 */
      id?: number;
      label?: string | null;
      delayProfileIds?: number[] | null;
      importListIds?: number[] | null;
      notificationIds?: number[] | null;
      restrictionIds?: number[] | null;
      indexerIds?: number[] | null;
      downloadClientIds?: number[] | null;
      autoTagIds?: number[] | null;
      seriesIds?: number[] | null;
    };
    TagResource: {
      /** Format: int32 */
      id?: number;
      label?: string | null;
    };
    TaskResource: {
      /** Format: int32 */
      id?: number;
      name?: string | null;
      taskName?: string | null;
      /** Format: int32 */
      interval?: number;
      /** Format: date-time */
      lastExecution?: string;
      /** Format: date-time */
      lastStartTime?: string;
      /** Format: date-time */
      nextExecution?: string;
      lastDuration?: components['schemas']['TimeSpan'];
    };
    TimeSpan: {
      /** Format: int64 */
      ticks?: number;
      /** Format: int32 */
      days?: number;
      /** Format: int32 */
      hours?: number;
      /** Format: int32 */
      milliseconds?: number;
      /** Format: int32 */
      minutes?: number;
      /** Format: int32 */
      seconds?: number;
      /** Format: double */
      totalDays?: number;
      /** Format: double */
      totalHours?: number;
      /** Format: double */
      totalMilliseconds?: number;
      /** Format: double */
      totalMinutes?: number;
      /** Format: double */
      totalSeconds?: number;
    };
    /** @enum {string} */
    TrackedDownloadState:
      | 'downloading'
      | 'importPending'
      | 'importing'
      | 'imported'
      | 'failedPending'
      | 'failed'
      | 'ignored';
    /** @enum {string} */
    TrackedDownloadStatus: 'ok' | 'warning' | 'error';
    TrackedDownloadStatusMessage: {
      title?: string | null;
      messages?: string[] | null;
    };
    UiConfigResource: {
      /** Format: int32 */
      id?: number;
      /** Format: int32 */
      firstDayOfWeek?: number;
      calendarWeekColumnHeader?: string | null;
      shortDateFormat?: string | null;
      longDateFormat?: string | null;
      timeFormat?: string | null;
      showRelativeDates?: boolean;
      enableColorImpairedMode?: boolean;
      theme?: string | null;
      /** Format: int32 */
      uiLanguage?: number;
    };
    UnmappedFolder: {
      name?: string | null;
      path?: string | null;
      relativePath?: string | null;
    };
    UpdateChanges: {
      new?: string[] | null;
      fixed?: string[] | null;
    };
    /** @enum {string} */
    UpdateMechanism: 'builtIn' | 'script' | 'external' | 'apt' | 'docker';
    UpdateResource: {
      /** Format: int32 */
      id?: number;
      version?: components['schemas']['Version'];
      branch?: string | null;
      /** Format: date-time */
      releaseDate?: string;
      fileName?: string | null;
      url?: string | null;
      installed?: boolean;
      /** Format: date-time */
      installedOn?: string | null;
      installable?: boolean;
      latest?: boolean;
      changes?: components['schemas']['UpdateChanges'];
      hash?: string | null;
    };
    Version: {
      /** Format: int32 */
      major?: number;
      /** Format: int32 */
      minor?: number;
      /** Format: int32 */
      build?: number;
      /** Format: int32 */
      revision?: number;
      /** Format: int32 */
      majorRevision?: number;
      /** Format: int32 */
      minorRevision?: number;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export type operations = Record<string, never>;
